// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// USUÁRIOS

model User {
    id          Int          @id @default(autoincrement())
    name        String
    email       String       @unique
    user_access UserAccess[]
    type        Type
    password    String
    order_buyer Order[]
    Cart        Cart[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("usuários")
}

enum Type {
    admin
    buyer

    // usa essa enum ou as models de acesso abaixo ?
}

model UserAccess {
    id        Int     @id @default(autoincrement())
    User      User?   @relation(fields: [user_id], references: [id])
    user_id   Int?
    Access    Access? @relation(fields: [access_id], references: [id])
    access_id Int?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Access {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    user_access UserAccess[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // essa tabela é o nível de acesso do usuário - pode cadastrar níveis como "comprador" e "adm"
    // com esses níveis cadastrados, o usuário tem que logar como comprador ou adm e cada um tem suas permissões (accessController.ts)
}

// CATEGORIAS

model Category {
    id          Int       @id @default(autoincrement())
    title       String    @unique @db.VarChar(100)
    description String    @db.VarChar(300)
    published   Boolean   @default(false)
    products    Product[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("categorias")
}

// PRODUTOS

model Product {
    id            Int           @id @default(autoincrement())
    title         String        @db.VarChar(100)
    description   String        @db.VarChar(300)
    price         Float
    measures      String?       @db.VarChar(10)
    amount        Int
    option        String        @db.VarChar(100)
    published     Boolean       @default(false)
    image         String?
    categories    Category[]
    cart_products CartProduct[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("produtos")
}

// CARRINHO DE COMPRAS

model Cart {
    id                   Int           @id @default(autoincrement())
    user_id              Int
    cart_status          String
    total_value          Float
    total_after_discount Float
    cartStatus           CartStatus    @default(Pending)
    cart_products        CartProduct[]
    address              Address[]
    User                 User          @relation(fields: [user_id], references: [id])

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("carrinho-de-compras")
}

enum CartStatus {
    Pending
    Cancelled
    Paid
}

model CartProduct {
    id            Int     @id @default(autoincrement())
    cart_id       Int
    product_id    Int
    quantity      Int
    product_price Float
    product       Product @relation(fields: [product_id], references: [id])
    cart          Cart    @relation(fields: [cart_id], references: [id])
}

model Address {
    id                      Int    @id @default(autoincrement())
    cart_id                 Int
    shipping                Float
    shipping_address_street String
    shipping_address_number String
    shipping_address_city   String
    shipping_address_state  String
    shipping_address_zip    String
    charge_address_street   String
    charge_address_number   String
    charge_address_city     String
    charge_address_state    String
    charge_address_zip      String
    cart                    Cart   @relation(fields: [cart_id], references: [id])

    @@map("endereços")
}

// PEDIDOS

model Order {
    id          Int            @id @default(autoincrement())
    amount      Int            @default(1)
    total_value Float
    orderStatus orderStatus    @default(Placed)
    payment     OrderPayment[]
    Buyer       User?          @relation(fields: [buyer_id], references: [id])
    buyer_id    Int?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("pedidos")
}

enum orderStatus {
    Placed
    Cancelled
    Dispatched
    Delivered
}

model OrderPayment {
    id      Int     @id @default(autoincrement())
    card    String?
    pix     String?
    invoice String?
    Order   Order?  @relation(fields: [orderId], references: [id])
    orderId Int?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

// CUPONS DE DESCONTO (OPCIONAL)

model Coupon {
    id          Int      @id @default(autoincrement())
    coupon_name String   @unique
    expiry_date DateTime
    discount    Float

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    //6:18:00
}
